import heapq as hq

cn = []     #Cajas que no entran en el contenedor
cc = []     #Cajas que están en el contenedor

def BuscarEspacioDisponible(EjeA):
    d = 0 #Espacio disponible
    for i in range(len(EjeA)):
        if EjeA[i] == 0:
            d += 1
    return d

def ColocarCaja(EjeA, dimension):
    e = 0
    for i in range(len(A)):
        if EjeA[i] == 0:
            e = 1
            break
    
    j = e 
    for j in range(dimension):
        EjeA[j] = 1

def AlgoritmoNatalia(Ancho, Alto, Largo, MyRec, cc, cn):
    
    #Representación del contenedor y su espacio disponible
    EjeX = [0] * Largo
    EjeY = [0] * Ancho
    EjeZ = [0] * Alto
    
    #Variables:
    v = Ancho * Alto * Largo     #volumen del contenedor
    vo = 0                       #volumen ocupado del contenedor
    vd = v                       #volumen disponible del contenedor
    c = 0                        #Cantidad de contenedores usados
    m = len(cc)                  #Cantidad de cajas a transportar/encuentran en el contenedor
    
    #Colocar las cajas: Aquí no sé muy bien qué hacer todavia 
    for i in range(len(MyRec)):
        vc = MyRec[i].largo * MyRec[i].alto * MyRec[i].ancho #Volumen de la caja
        
        if vc <= vd:
            dx = BuscarEspacioDisponible(EjeX)
            dy = BuscarEspacioDisponible(EjeY)
            dz = BuscarEspacioDisponible(EjeZ)
            
            if MyRec[i].ancho <= dx && MyRec[i].largo <= dy &&  MyRec[i].alto <= dz:
                ColocarCaja(EjeX, MyRec[i].ancho)
                ColocarCaja(EjeY, MyRec[i].largo)
                ColocarCaja(EjeZ, MyRec[i].alto)
                cc.append(MyRec[i])
                vd -= vc
        
        else:
            cn.append(MyRec[i])
    
    
    #Forma 1 de obtener el vo
    for i in range(m):
        vo += cc[i].ancho * cc[i].largo * cc[i].alto
    
    
    #Forma 2 de obtener el vo
    contx = 0
    conty = 0
    contz = 0
    
    for i in range(len(EjeX)):
        if EjeX[i] == 1:
            contx += 1
    
    for i in range(len(EjeY)):
        if EjeY[i] == 1:
            conty += 1
            
    for i in range(len(EjeZ)):
        if EjeZ[i] == 1:
            contz += 1
    
    vo = contx * conty * contz
    
    #Obtener el vd
    vd = v - vo
    
    return vo, c, vd, m
    
    
    
    
    
    
    
